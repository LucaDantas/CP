We'll take two numbers N and M that represent the number of vertices and the number of edges of the graph - We have to run an dfs to find how many separated graphs are there, for example if 1 is connected to 2 and 3 is connected to 4 and 5 we have two families because these two graphs have no link. To find the number of independent graphs we run an dfs and every time we visit a node we save it in an array of bool (could be a bitset to be faster) in which false represents that it was not visited and true that it was visited, after we run dfs we'll have every node linked to that first one already visited, which means that they're only one family, and when we go inside the for checking if any node was not visited, those that were will be marked as true in the bitset and those that weren't will be marked as false, and when we encounter any node with false we run dfs from it and add 1 to the number of families that are in that graph. Complexity O(N+M)

Temos que achar as componentes conexas do grafo G
